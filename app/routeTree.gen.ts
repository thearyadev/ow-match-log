/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as StatisticsImport } from './routes/statistics'
import { Route as ImportImport } from './routes/import'
import { Route as DataImport } from './routes/data'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const StatisticsRoute = StatisticsImport.update({
    id: '/statistics',
    path: '/statistics',
    getParentRoute: () => rootRoute,
} as any)

const ImportRoute = ImportImport.update({
    id: '/import',
    path: '/import',
    getParentRoute: () => rootRoute,
} as any)

const DataRoute = DataImport.update({
    id: '/data',
    path: '/data',
    getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
    interface FileRoutesByPath {
        '/': {
            id: '/'
            path: '/'
            fullPath: '/'
            preLoaderRoute: typeof IndexImport
            parentRoute: typeof rootRoute
        }
        '/data': {
            id: '/data'
            path: '/data'
            fullPath: '/data'
            preLoaderRoute: typeof DataImport
            parentRoute: typeof rootRoute
        }
        '/import': {
            id: '/import'
            path: '/import'
            fullPath: '/import'
            preLoaderRoute: typeof ImportImport
            parentRoute: typeof rootRoute
        }
        '/statistics': {
            id: '/statistics'
            path: '/statistics'
            fullPath: '/statistics'
            preLoaderRoute: typeof StatisticsImport
            parentRoute: typeof rootRoute
        }
    }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
    '/': typeof IndexRoute
    '/data': typeof DataRoute
    '/import': typeof ImportRoute
    '/statistics': typeof StatisticsRoute
}

export interface FileRoutesByTo {
    '/': typeof IndexRoute
    '/data': typeof DataRoute
    '/import': typeof ImportRoute
    '/statistics': typeof StatisticsRoute
}

export interface FileRoutesById {
    __root__: typeof rootRoute
    '/': typeof IndexRoute
    '/data': typeof DataRoute
    '/import': typeof ImportRoute
    '/statistics': typeof StatisticsRoute
}

export interface FileRouteTypes {
    fileRoutesByFullPath: FileRoutesByFullPath
    fullPaths: '/' | '/data' | '/import' | '/statistics'
    fileRoutesByTo: FileRoutesByTo
    to: '/' | '/data' | '/import' | '/statistics'
    id: '__root__' | '/' | '/data' | '/import' | '/statistics'
    fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
    IndexRoute: typeof IndexRoute
    DataRoute: typeof DataRoute
    ImportRoute: typeof ImportRoute
    StatisticsRoute: typeof StatisticsRoute
}

const rootRouteChildren: RootRouteChildren = {
    IndexRoute: IndexRoute,
    DataRoute: DataRoute,
    ImportRoute: ImportRoute,
    StatisticsRoute: StatisticsRoute,
}

export const routeTree = rootRoute
    ._addFileChildren(rootRouteChildren)
    ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/data",
        "/import",
        "/statistics"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/data": {
      "filePath": "data.tsx"
    },
    "/import": {
      "filePath": "import.tsx"
    },
    "/statistics": {
      "filePath": "statistics.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
